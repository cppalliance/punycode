//
// Copyright (c) 2024 Vinnie Falco (vinnie.falco@gmail.com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/cppalliance/punycode
//

// Test that header file is self-contained.
#include <boost/punycode/idna.hpp>

#include "test_suite.hpp"

namespace boost {
namespace punycode {

// IDNA Test Vectors
// https://www.gnu.org/software/libidn/draft-josefsson-idn-test-vectors.html

struct idna_test
{
    void
    check(
        core::string_view domain,
        core::string_view ascii)
    {
        auto rv = utf8_to_idna(domain);
        if( BOOST_TEST(! rv.has_error()))
            BOOST_TEST_EQ(rv.value(), ascii);
    }

    void
    testEncode()
    {
// 5.1 Arabic (Egyptian)
check(
	"\xD9\x84\xD9\x8A\xD9\x87\xD9\x85\xD8\xA7\xD8\xA8\xD8\xAA\xD9\x83"
	"\xD9\x84\xD9\x85\xD9\x88\xD8\xB4\xD8\xB9\xD8\xB1\xD8\xA8\xD9\x8A"
	"\xD8\x9F",
    "xn--egbpdaj6bu4bxfgehfvwxn");
// 5.2 Chinese (simplified)
check(
	"\xE4\xBB\x96\xE4\xBB\xAC\xE4\xB8\xBA\xE4\xBB\x80\xE4\xB9\x88\xE4"
	"\xB8\x8D\xE8\xAF\xB4\xE4\xB8\xAD\xE6\x96\x87",
    "xn--ihqwcrb4cv8a8dqg056pqjye");
// 5.3 Chinese (traditional)
check(
	"\xE4\xBB\x96\xE5\x80\x91\xE7\x88\xB2\xE4\xBB\x80\xE9\xBA\xBD\xE4"
	"\xB8\x8D\xE8\xAA\xAA\xE4\xB8\xAD\xE6\x96\x87",
    "xn--ihqwctvzc91f659drss3x8bo0yb");
// 5.4 Czech
check(
	"Pro\xC4\x8Dprost\xC4\x9Bneml"
	"uv\xC3\xAD\xC4\x8D" "esky",
    "xn--proprostnemluvesky-uyb24dma41a");
// 5.5 Hebrew
check(
	"\xD7\x9C\xD7\x9E\xD7\x94\xD7\x94\xD7\x9D\xD7\xA4\xD7\xA9\xD7\x95"
	"\xD7\x98\xD7\x9C\xD7\x90\xD7\x9E\xD7\x93\xD7\x91\xD7\xA8\xD7\x99"
	"\xD7\x9D\xD7\xA2\xD7\x91\xD7\xA8\xD7\x99\xD7\xAA",
    "xn--4dbcagdahymbxekheh6e0a7fei0b");
// 5.6 Hindi (Devanagari)
check(
	"\xE0\xA4\xAF\xE0\xA4\xB9\xE0\xA4\xB2\xE0\xA5\x8B\xE0\xA4\x97\xE0"
	"\xA4\xB9\xE0\xA4\xBF\xE0\xA4\xA8\xE0\xA5\x8D\xE0\xA4\xA6\xE0\xA5"
	"\x80\xE0\xA4\x95\xE0\xA5\x8D\xE0\xA4\xAF\xE0\xA5\x8B\xE0\xA4\x82"
	"\xE0\xA4\xA8\xE0\xA4\xB9\xE0\xA5\x80\xE0\xA4\x82\xE0\xA4\xAC\xE0"
	"\xA5\x8B\xE0\xA4\xB2\xE0\xA4\xB8\xE0\xA4\x95\xE0\xA4\xA4\xE0\xA5"
	"\x87\xE0\xA4\xB9\xE0\xA5\x88\xE0\xA4\x82",
    "xn--i1baa7eci9glrd9b2ae1bj0hfcgg6iyaf8o0a1dig0cd");
// 5.7 Japanese (kanji and hiragana)
check(
	"\xE3\x81\xAA\xE3\x81\x9C\xE3\x81\xBF\xE3\x82\x93\xE3\x81\xAA\xE6"
	"\x97\xA5\xE6\x9C\xAC\xE8\xAA\x9E\xE3\x82\x92\xE8\xA9\xB1\xE3\x81"
	"\x97\xE3\x81\xA6\xE3\x81\x8F\xE3\x82\x8C\xE3\x81\xAA\xE3\x81\x84"
	"\xE3\x81\xAE\xE3\x81\x8B",
    "xn--n8jok5ay5dzabd5bym9f0cm5685rrjetr6pdxa");
// 5.8 Russian (Cyrillic)
check(
	"\xD0\xBF\xD0\xBE\xD1\x87\xD0\xB5\xD0\xBC\xD1\x83\xD0\xB6\xD0\xB5"
	"\xD0\xBE\xD0\xBD\xD0\xB8\xD0\xBD\xD0\xB5\xD0\xB3\xD0\xBE\xD0\xB2"
	"\xD0\xBE\xD1\x80\xD1\x8F\xD1\x82\xD0\xBF\xD0\xBE\xD1\x80\xD1\x83"
	"\xD1\x81\xD1\x81\xD0\xBA\xD0\xB8",
    "xn--b1abfaaepdrnnbgefbadotcwatmq2g4l");
// 5.9 Spanish
check(
	"Porqu\xC3\xA9nopuedens"
	"implementehablar"
	"enEspa\xC3\xB1ol",
    "xn--porqunopuedensimplementehablarenespaol-fmd56a");
// 5.10 Vietnamese
check(
	"T\xE1\xBA\xA1isaoh\xE1\xBB\x8Dkh\xC3\xB4"
	"ngth\xE1\xBB\x83" "ch\xE1\xBB\x89n\xC3\xB3i"
	"ti\xE1\xBA\xBFngVi\xE1\xBB\x87t",
    "xn--tisaohkhngthchnitingvit-kjcr8268qyxafd2f1b9g");
// 5.11 Japanese
check(
	"3\xE5\xB9\xB4" "B\xE7\xB5\x84\xE9\x87\x91\xE5\x85\xAB\xE5\x85"
	"\x88\xE7\x94\x9F",
    "xn--3b-ww4c5e180e575a65lsy2b");
// 5.12 Japanese
check(
	"\xE5\xAE\x89\xE5\xAE\xA4\xE5\xA5\x88\xE7\xBE\x8E\xE6\x81\xB5\x2D"
	"with\x2DSUPER\x2DMONKE"
	"YS",
    "xn---with-super-monkeys-pc58ag80a8qai00g7n9n");
// 5.13 Japanese
check(
	"Hello\x2D" "Another\x2DWa"
	"y\x2D\xE3\x81\x9D\xE3\x82\x8C\xE3\x81\x9E\xE3\x82\x8C\xE3\x81"
	"\xAE\xE5\xA0\xB4\xE6\x89\x80",
    "xn--hello-another-way--fc4qua05auwb3674vfr0b");
// 5.14 Japanese
check(
	"\xE3\x81\xB2\xE3\x81\xA8\xE3\x81\xA4\xE5\xB1\x8B\xE6\xA0\xB9\xE3"
	"\x81\xAE\xE4\xB8\x8B" "2",
    "xn--2-u9tlzr9756bt3uc0v");
// 5.15 Japanese
check(
	"Maji\xE3\x81\xA7Koi\xE3\x81\x99\xE3\x82\x8B"
	"5\xE7\xA7\x92\xE5\x89\x8D",
    "xn--majikoi5-783gue6qz075azm5e");
// 5.16 Japanese
check(
	"\xE3\x83\x91\xE3\x83\x95\xE3\x82\xA3\xE3\x83\xBC" "de\xE3\x83"
	"\xAB\xE3\x83\xB3\xE3\x83\x90",
    "xn--de-jg4avhby1noc0d");
// 5.17 Japanese
check(
	"\xE3\x81\x9D\xE3\x81\xAE\xE3\x82\xB9\xE3\x83\x94\xE3\x83\xBC\xE3"
	"\x83\x89\xE3\x81\xA7",
    "xn--d9juau41awczczp");
// 5.18 Greek
check(
	"\xCE\xB5\xCE\xBB\xCE\xBB\xCE\xB7\xCE\xBD\xCE\xB9\xCE\xBA\xCE\xAC",
    "xn--hxargifdar");
// 5.19 Maltese (Malti)
check(
	"bon\xC4\xA1usa\xC4\xA7\xC4\xA7" "a",
    "xn--bonusaa-5bb1da");
// 5.20 Russian (Cyrillic)
check(
	"\xD0\xBF\xD0\xBE\xD1\x87\xD0\xB5\xD0\xBC\xD1\x83\xD0\xB6\xD0\xB5"
	"\xD0\xBE\xD0\xBD\xD0\xB8\xD0\xBD\xD0\xB5\xD0\xB3\xD0\xBE\xD0\xB2"
	"\xD0\xBE\xD1\x80\xD1\x8F\xD1\x82\xD0\xBF\xD0\xBE\xD1\x80\xD1\x83"
	"\xD1\x81\xD1\x81\xD0\xBA\xD0\xB8",
    "xn--b1abfaaepdrnnbgefbadotcwatmq2g4l");
    }

    void
    run()
    {
        check("boost.org", "boost.org");
        check("Boost.org", "boost.org");
        testEncode();
    }
};

TEST_SUITE(
    idna_test,
    "boost.punycode.idna");

} // punycode
} // boost
